{
  "description": "ClusterPolicy declares validation, mutation, and generation behaviors for matching resources.",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "Spec declares policy behaviors.",
      "properties": {
        "admission": {
          "default": true,
          "description": "Admission controls if rules are applied during admission.\nOptional. Default value is \"true\".",
          "type": "boolean"
        },
        "applyRules": {
          "description": "ApplyRules controls how rules in a policy are applied. Rule are processed in\nthe order of declaration. When set to `One` processing stops after a rule has\nbeen applied i.e. the rule matches and results in a pass, fail, or error. When\nset to `All` all rules in the policy are processed. The default is `All`.",
          "enum": [
            "All",
            "One"
          ],
          "type": "string"
        },
        "background": {
          "default": true,
          "description": "Background controls if rules are applied to existing resources during a background scan.\nOptional. Default value is \"true\". The value must be set to \"false\" if the policy rule\nuses variables that are only available in the admission review request (e.g. user name).",
          "type": "boolean"
        },
        "failurePolicy": {
          "description": "FailurePolicy defines how unexpected policy errors and webhook response timeout errors are handled.\nRules within the same policy share the same failure behavior.\nAllowed values are Ignore or Fail. Defaults to Fail.",
          "enum": [
            "Ignore",
            "Fail"
          ],
          "type": "string"
        },
        "generateExisting": {
          "description": "GenerateExisting controls whether to trigger generate rule in existing resources\nIf is set to \"true\" generate rule will be triggered and applied to existing matched resources.\nDefaults to \"false\" if not specified.",
          "type": "boolean"
        },
        "generateExistingOnPolicyUpdate": {
          "description": "Deprecated, use generateExisting instead",
          "type": "boolean"
        },
        "mutateExistingOnPolicyUpdate": {
          "description": "MutateExistingOnPolicyUpdate controls if a mutateExisting policy is applied on policy events.\nDefault value is \"false\".",
          "type": "boolean"
        },
        "rules": {
          "description": "Rules is a list of Rule instances. A Policy contains multiple rules and\neach rule can validate, mutate, or generate resources.",
          "items": {
            "description": "Rule defines a validation, mutation, or generation control for matching resources.\nEach rules contains a match declaration to select resources, and an optional exclude\ndeclaration to specify which resources to exclude.",
            "properties": {
              "celPreconditions": {
                "description": "CELPreconditions are used to determine if a policy rule should be applied by evaluating a\nset of CEL conditions. It can only be used with the validate.cel subrule",
                "items": {
                  "description": "MatchCondition represents a condition which must by fulfilled for a request to be sent to a webhook.",
                  "properties": {
                    "expression": {
                      "description": "Expression represents the expression which will be evaluated by CEL. Must evaluate to bool.\nCEL expressions have access to the contents of the AdmissionRequest and Authorizer, organized into CEL variables:\n\n\n'object' - The object from the incoming request. The value is null for DELETE requests.\n'oldObject' - The existing object. The value is null for CREATE requests.\n'request' - Attributes of the admission request(/pkg/apis/admission/types.go#AdmissionRequest).\n'authorizer' - A CEL Authorizer. May be used to perform authorization checks for the principal (user or service account) of the request.\n  See https://pkg.go.dev/k8s.io/apiserver/pkg/cel/library#Authz\n'authorizer.requestResource' - A CEL ResourceCheck constructed from the 'authorizer' and configured with the\n  request resource.\nDocumentation on CEL: https://kubernetes.io/docs/reference/using-api/cel/\n\n\nRequired.",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name is an identifier for this match condition, used for strategic merging of MatchConditions,\nas well as providing an identifier for logging purposes. A good name should be descriptive of\nthe associated expression.\nName must be a qualified name consisting of alphanumeric characters, '-', '_' or '.', and\nmust start and end with an alphanumeric character (e.g. 'MyName',  or 'my.name',  or\n'123-abc', regex used for validation is '([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9]') with an\noptional DNS subdomain prefix and '/' (e.g. 'example.com/MyName')\n\n\nRequired.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "expression",
                    "name"
                  ],
                  "type": "object",
                  "additionalProperties": false
                },
                "type": "array"
              },
              "context": {
                "description": "Context defines variables and data sources that can be used during rule execution.",
                "items": {
                  "description": "ContextEntry adds variables and data sources to a rule Context. Either a\nConfigMap reference or a APILookup must be provided.",
                  "properties": {
                    "apiCall": {
                      "description": "APICall is an HTTP request to the Kubernetes API server, or other JSON web service.\nThe data returned is stored in the context with the name for the context entry.",
                      "properties": {
                        "data": {
                          "description": "The data object specifies the POST data sent to the server.\nOnly applicable when the method field is set to POST.",
                          "items": {
                            "description": "RequestData contains the HTTP POST data",
                            "properties": {
                              "key": {
                                "description": "Key is a unique identifier for the data value",
                                "type": "string"
                              },
                              "value": {
                                "description": "Value is the data value",
                                "x-kubernetes-preserve-unknown-fields": true
                              }
                            },
                            "required": [
                              "key",
                              "value"
                            ],
                            "type": "object",
                            "additionalProperties": false
                          },
                          "type": "array"
                        },
                        "jmesPath": {
                          "description": "JMESPath is an optional JSON Match Expression that can be used to\ntransform the JSON response returned from the server. For example\na JMESPath of \"items | length(@)\" applied to the API server response\nfor the URLPath \"/apis/apps/v1/deployments\" will return the total count\nof deployments across all namespaces.",
                          "type": "string"
                        },
                        "method": {
                          "default": "GET",
                          "description": "Method is the HTTP request type (GET or POST).",
                          "enum": [
                            "GET",
                            "POST"
                          ],
                          "type": "string"
                        },
                        "service": {
                          "description": "Service is an API call to a JSON web service.\nThis is used for non-Kubernetes API server calls.\nIt's mutually exclusive with the URLPath field.",
                          "properties": {
                            "caBundle": {
                              "description": "CABundle is a PEM encoded CA bundle which will be used to validate\nthe server certificate.",
                              "type": "string"
                            },
                            "url": {
                              "description": "URL is the JSON web service URL. A typical form is\n`https://{service}.{namespace}:{port}/{path}`.",
                              "type": "string"
                            }
                          },
                          "required": [
                            "url"
                          ],
                          "type": "object",
                          "additionalProperties": false
                        },
                        "urlPath": {
                          "description": "URLPath is the URL path to be used in the HTTP GET or POST request to the\nKubernetes API server (e.g. \"/api/v1/namespaces\" or  \"/apis/apps/v1/deployments\").\nThe format required is the same format used by the `kubectl get --raw` command.\nSee https://kyverno.io/docs/writing-policies/external-data-sources/#variables-from-kubernetes-api-server-calls\nfor details.\nIt's mutually exclusive with the Service field.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "configMap": {
                      "description": "ConfigMap is the ConfigMap reference.",
                      "properties": {
                        "name": {
                          "description": "Name is the ConfigMap name.",
                          "type": "string"
                        },
                        "namespace": {
                          "description": "Namespace is the ConfigMap namespace.",
                          "type": "string"
                        }
                      },
                      "required": [
                        "name"
                      ],
                      "type": "object",
                      "additionalProperties": false
                    },
                    "globalReference": {
                      "description": "GlobalContextEntryReference is a reference to a cached global context entry.",
                      "properties": {
                        "jmesPath": {
                          "description": "JMESPath is an optional JSON Match Expression that can be used to\ntransform the JSON response returned from the server. For example\na JMESPath of \"items | length(@)\" applied to the API server response\nfor the URLPath \"/apis/apps/v1/deployments\" will return the total count\nof deployments across all namespaces.",
                          "type": "string"
                        },
                        "name": {
                          "description": "Name of the global context entry",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "imageRegistry": {
                      "description": "ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image\ndetails.",
                      "properties": {
                        "imageRegistryCredentials": {
                          "description": "ImageRegistryCredentials provides credentials that will be used for authentication with registry",
                          "properties": {
                            "allowInsecureRegistry": {
                              "description": "AllowInsecureRegistry allows insecure access to a registry.",
                              "type": "boolean"
                            },
                            "providers": {
                              "description": "Providers specifies a list of OCI Registry names, whose authentication providers are provided.\nIt can be of one of these values: default,google,azure,amazon,github.",
                              "items": {
                                "description": "ImageRegistryCredentialsProvidersType provides the list of credential providers required.",
                                "enum": [
                                  "default",
                                  "amazon",
                                  "azure",
                                  "google",
                                  "github"
                                ],
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "secrets": {
                              "description": "Secrets specifies a list of secrets that are provided for credentials.\nSecrets must live in the Kyverno namespace.",
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            }
                          },
                          "type": "object",
                          "additionalProperties": false
                        },
                        "jmesPath": {
                          "description": "JMESPath is an optional JSON Match Expression that can be used to\ntransform the ImageData struct returned as a result of processing\nthe image reference.",
                          "type": "string"
                        },
                        "reference": {
                          "description": "Reference is image reference to a container image in the registry.\nExample: ghcr.io/kyverno/kyverno:latest",
                          "type": "string"
                        }
                      },
                      "required": [
                        "reference"
                      ],
                      "type": "object",
                      "additionalProperties": false
                    },
                    "name": {
                      "description": "Name is the variable name.",
                      "type": "string"
                    },
                    "variable": {
                      "description": "Variable defines an arbitrary JMESPath context variable that can be defined inline.",
                      "properties": {
                        "default": {
                          "description": "Default is an optional arbitrary JSON object that the variable may take if the JMESPath\nexpression evaluates to nil",
                          "x-kubernetes-preserve-unknown-fields": true
                        },
                        "jmesPath": {
                          "description": "JMESPath is an optional JMESPath Expression that can be used to\ntransform the variable.",
                          "type": "string"
                        },
                        "value": {
                          "description": "Value is any arbitrary JSON object representable in YAML or JSON form.",
                          "x-kubernetes-preserve-unknown-fields": true
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "type": "array"
              },
              "exclude": {
                "description": "ExcludeResources defines when this policy rule should not be applied. The exclude\ncriteria can include resource information (e.g. kind, name, namespace, labels)\nand admission review request information like the name or role.",
                "properties": {
                  "all": {
                    "description": "All allows specifying resources which will be ANDed",
                    "items": {
                      "description": "ResourceFilter allow users to \"AND\" or \"OR\" between resources",
                      "properties": {
                        "clusterRoles": {
                          "description": "ClusterRoles is the list of cluster-wide role names for the user.",
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "resources": {
                          "description": "ResourceDescription contains information about the resource being created or modified.",
                          "properties": {
                            "annotations": {
                              "additionalProperties": {
                                "type": "string"
                              },
                              "description": "Annotations is a  map of annotations (key-value pairs of type string). Annotation keys\nand values support the wildcard characters \"*\" (matches zero or many characters) and\n\"?\" (matches at least one character).",
                              "type": "object"
                            },
                            "kinds": {
                              "description": "Kinds is a list of resource kinds.",
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "name": {
                              "description": "Name is the name of the resource. The name supports wildcard characters\n\"*\" (matches zero or many characters) and \"?\" (at least one character).\nNOTE: \"Name\" is being deprecated in favor of \"Names\".",
                              "type": "string"
                            },
                            "names": {
                              "description": "Names are the names of the resources. Each name supports wildcard characters\n\"*\" (matches zero or many characters) and \"?\" (at least one character).",
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "namespaceSelector": {
                              "description": "NamespaceSelector is a label selector for the resource namespace. Label keys and values\nin `matchLabels` support the wildcard characters `*` (matches zero or many characters)\nand `?` (matches one character).Wildcards allows writing label selectors like\n[\"storage.k8s.io/*\": \"*\"]. Note that using [\"*\" : \"*\"] matches any key and value but\ndoes not match an empty label set.",
                              "properties": {
                                "matchExpressions": {
                                  "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                  "items": {
                                    "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                                    "properties": {
                                      "key": {
                                        "description": "key is the label key that the selector applies to.",
                                        "type": "string"
                                      },
                                      "operator": {
                                        "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                                        "type": "string"
                                      },
                                      "values": {
                                        "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                                        "items": {
                                          "type": "string"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "required": [
                                      "key",
                                      "operator"
                                    ],
                                    "type": "object",
                                    "additionalProperties": false
                                  },
                                  "type": "array"
                                },
                                "matchLabels": {
                                  "additionalProperties": {
                                    "type": "string"
                                  },
                                  "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                  "type": "object"
                                }
                              },
                              "type": "object",
                              "x-kubernetes-map-type": "atomic",
                              "additionalProperties": false
                            },
                            "namespaces": {
                              "description": "Namespaces is a list of namespaces names. Each name supports wildcard characters\n\"*\" (matches zero or many characters) and \"?\" (at least one character).",
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "operations": {
                              "description": "Operations can contain values [\"CREATE, \"UPDATE\", \"CONNECT\", \"DELETE\"], which are used to match a specific action.",
                              "items": {
                                "description": "AdmissionOperation can have one of the values CREATE, UPDATE, CONNECT, DELETE, which are used to match a specific action.",
                                "enum": [
                                  "CREATE",
                                  "CONNECT",
                                  "UPDATE",
                                  "DELETE"
                                ],
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "selector": {
                              "description": "Selector is a label selector. Label keys and values in `matchLabels` support the wildcard\ncharacters `*` (matches zero or many characters) and `?` (matches one character).\nWildcards allows writing label selectors like [\"storage.k8s.io/*\": \"*\"]. Note that\nusing [\"*\" : \"*\"] matches any key and value but does not match an empty label set.",
                              "properties": {
                                "matchExpressions": {
                                  "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                  "items": {
                                    "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                                    "properties": {
                                      "key": {
                                        "description": "key is the label key that the selector applies to.",
                                        "type": "string"
                                      },
                                      "operator": {
                                        "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                                        "type": "string"
                                      },
                                      "values": {
                                        "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                                        "items": {
                                          "type": "string"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "required": [
                                      "key",
                                      "operator"
                                    ],
                                    "type": "object",
                                    "additionalProperties": false
                                  },
                                  "type": "array"
                                },
                                "matchLabels": {
                                  "additionalProperties": {
                                    "type": "string"
                                  },
                                  "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                  "type": "object"
                                }
                              },
                              "type": "object",
                              "x-kubernetes-map-type": "atomic",
                              "additionalProperties": false
                            }
                          },
                          "type": "object",
                          "additionalProperties": false
                        },
                        "roles": {
                          "description": "Roles is the list of namespaced role names for the user.",
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "subjects": {
                          "description": "Subjects is the list of subject names like users, user groups, and service accounts.",
                          "items": {
                            "description": "Subject contains a reference to the object or user identities a role binding applies to.  This can either hold a direct API object reference,\nor a value for non-objects such as user and group names.",
                            "properties": {
                              "apiGroup": {
                                "description": "APIGroup holds the API group of the referenced subject.\nDefaults to \"\" for ServiceAccount subjects.\nDefaults to \"rbac.authorization.k8s.io\" for User and Group subjects.",
                                "type": "string"
                              },
                              "kind": {
                                "description": "Kind of object being referenced. Values defined by this API group are \"User\", \"Group\", and \"ServiceAccount\".\nIf the Authorizer does not recognized the kind value, the Authorizer should report an error.",
                                "type": "string"
                              },
                              "name": {
                                "description": "Name of the object being referenced.",
                                "type": "string"
                              },
                              "namespace": {
                                "description": "Namespace of the referenced object.  If the object kind is non-namespace, such as \"User\" or \"Group\", and this value is not empty\nthe Authorizer should report an error.",
                                "type": "string"
                              }
                            },
                            "required": [
                              "kind",
                              "name"
                            ],
                            "type": "object",
                            "x-kubernetes-map-type": "atomic",
                            "additionalProperties": false
                          },
                          "type": "array"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  },
                  "any": {
                    "description": "Any allows specifying resources which will be ORed",
                    "items": {
                      "description": "ResourceFilter allow users to \"AND\" or \"OR\" between resources",
                      "properties": {
                        "clusterRoles": {
                          "description": "ClusterRoles is the list of cluster-wide role names for the user.",
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "resources": {
                          "description": "ResourceDescription contains information about the resource being created or modified.",
                          "properties": {
                            "annotations": {
                              "additionalProperties": {
                                "type": "string"
                              },
                              "description": "Annotations is a  map of annotations (key-value pairs of type string). Annotation keys\nand values support the wildcard characters \"*\" (matches zero or many characters) and\n\"?\" (matches at least one character).",
                              "type": "object"
                            },
                            "kinds": {
                              "description": "Kinds is a list of resource kinds.",
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "name": {
                              "description": "Name is the name of the resource. The name supports wildcard characters\n\"*\" (matches zero or many characters) and \"?\" (at least one character).\nNOTE: \"Name\" is being deprecated in favor of \"Names\".",
                              "type": "string"
                            },
                            "names": {
                              "description": "Names are the names of the resources. Each name supports wildcard characters\n\"*\" (matches zero or many characters) and \"?\" (at least one character).",
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "namespaceSelector": {
                              "description": "NamespaceSelector is a label selector for the resource namespace. Label keys and values\nin `matchLabels` support the wildcard characters `*` (matches zero or many characters)\nand `?` (matches one character).Wildcards allows writing label selectors like\n[\"storage.k8s.io/*\": \"*\"]. Note that using [\"*\" : \"*\"] matches any key and value but\ndoes not match an empty label set.",
                              "properties": {
                                "matchExpressions": {
                                  "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                  "items": {
                                    "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                                    "properties": {
                                      "key": {
                                        "description": "key is the label key that the selector applies to.",
                                        "type": "string"
                                      },
                                      "operator": {
                                        "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                                        "type": "string"
                                      },
                                      "values": {
                                        "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                                        "items": {
                                          "type": "string"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "required": [
                                      "key",
                                      "operator"
                                    ],
                                    "type": "object",
                                    "additionalProperties": false
                                  },
                                  "type": "array"
                                },
                                "matchLabels": {
                                  "additionalProperties": {
                                    "type": "string"
                                  },
                                  "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                  "type": "object"
                                }
                              },
                              "type": "object",
                              "x-kubernetes-map-type": "atomic",
                              "additionalProperties": false
                            },
                            "namespaces": {
                              "description": "Namespaces is a list of namespaces names. Each name supports wildcard characters\n\"*\" (matches zero or many characters) and \"?\" (at least one character).",
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "operations": {
                              "description": "Operations can contain values [\"CREATE, \"UPDATE\", \"CONNECT\", \"DELETE\"], which are used to match a specific action.",
                              "items": {
                                "description": "AdmissionOperation can have one of the values CREATE, UPDATE, CONNECT, DELETE, which are used to match a specific action.",
                                "enum": [
                                  "CREATE",
                                  "CONNECT",
                                  "UPDATE",
                                  "DELETE"
                                ],
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "selector": {
                              "description": "Selector is a label selector. Label keys and values in `matchLabels` support the wildcard\ncharacters `*` (matches zero or many characters) and `?` (matches one character).\nWildcards allows writing label selectors like [\"storage.k8s.io/*\": \"*\"]. Note that\nusing [\"*\" : \"*\"] matches any key and value but does not match an empty label set.",
                              "properties": {
                                "matchExpressions": {
                                  "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                  "items": {
                                    "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                                    "properties": {
                                      "key": {
                                        "description": "key is the label key that the selector applies to.",
                                        "type": "string"
                                      },
                                      "operator": {
                                        "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                                        "type": "string"
                                      },
                                      "values": {
                                        "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                                        "items": {
                                          "type": "string"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "required": [
                                      "key",
                                      "operator"
                                    ],
                                    "type": "object",
                                    "additionalProperties": false
                                  },
                                  "type": "array"
                                },
                                "matchLabels": {
                                  "additionalProperties": {
                                    "type": "string"
                                  },
                                  "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                  "type": "object"
                                }
                              },
                              "type": "object",
                              "x-kubernetes-map-type": "atomic",
                              "additionalProperties": false
                            }
                          },
                          "type": "object",
                          "additionalProperties": false
                        },
                        "roles": {
                          "description": "Roles is the list of namespaced role names for the user.",
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "subjects": {
                          "description": "Subjects is the list of subject names like users, user groups, and service accounts.",
                          "items": {
                            "description": "Subject contains a reference to the object or user identities a role binding applies to.  This can either hold a direct API object reference,\nor a value for non-objects such as user and group names.",
                            "properties": {
                              "apiGroup": {
                                "description": "APIGroup holds the API group of the referenced subject.\nDefaults to \"\" for ServiceAccount subjects.\nDefaults to \"rbac.authorization.k8s.io\" for User and Group subjects.",
                                "type": "string"
                              },
                              "kind": {
                                "description": "Kind of object being referenced. Values defined by this API group are \"User\", \"Group\", and \"ServiceAccount\".\nIf the Authorizer does not recognized the kind value, the Authorizer should report an error.",
                                "type": "string"
                              },
                              "name": {
                                "description": "Name of the object being referenced.",
                                "type": "string"
                              },
                              "namespace": {
                                "description": "Namespace of the referenced object.  If the object kind is non-namespace, such as \"User\" or \"Group\", and this value is not empty\nthe Authorizer should report an error.",
                                "type": "string"
                              }
                            },
                            "required": [
                              "kind",
                              "name"
                            ],
                            "type": "object",
                            "x-kubernetes-map-type": "atomic",
                            "additionalProperties": false
                          },
                          "type": "array"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "generate": {
                "description": "Generation is used to create new resources.",
                "properties": {
                  "apiVersion": {
                    "description": "APIVersion specifies resource apiVersion.",
                    "type": "string"
                  },
                  "clone": {
                    "description": "Clone specifies the source resource used to populate each generated resource.\nAt most one of Data or Clone can be specified. If neither are provided, the generated\nresource will be created with default data only.",
                    "properties": {
                      "name": {
                        "description": "Name specifies name of the resource.",
                        "type": "string"
                      },
                      "namespace": {
                        "description": "Namespace specifies source resource namespace.",
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "cloneList": {
                    "description": "CloneList specifies the list of source resource used to populate each generated resource.",
                    "properties": {
                      "kinds": {
                        "description": "Kinds is a list of resource kinds.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "namespace": {
                        "description": "Namespace specifies source resource namespace.",
                        "type": "string"
                      },
                      "selector": {
                        "description": "Selector is a label selector. Label keys and values in `matchLabels`.\nwildcard characters are not supported.",
                        "properties": {
                          "matchExpressions": {
                            "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                            "items": {
                              "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                              "properties": {
                                "key": {
                                  "description": "key is the label key that the selector applies to.",
                                  "type": "string"
                                },
                                "operator": {
                                  "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                                  "type": "string"
                                },
                                "values": {
                                  "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                }
                              },
                              "required": [
                                "key",
                                "operator"
                              ],
                              "type": "object",
                              "additionalProperties": false
                            },
                            "type": "array"
                          },
                          "matchLabels": {
                            "additionalProperties": {
                              "type": "string"
                            },
                            "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                            "type": "object"
                          }
                        },
                        "type": "object",
                        "x-kubernetes-map-type": "atomic",
                        "additionalProperties": false
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "data": {
                    "description": "Data provides the resource declaration used to populate each generated resource.\nAt most one of Data or Clone must be specified. If neither are provided, the generated\nresource will be created with default data only.",
                    "x-kubernetes-preserve-unknown-fields": true
                  },
                  "kind": {
                    "description": "Kind specifies resource kind.",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name specifies the resource name.",
                    "type": "string"
                  },
                  "namespace": {
                    "description": "Namespace specifies resource namespace.",
                    "type": "string"
                  },
                  "orphanDownstreamOnPolicyDelete": {
                    "description": "OrphanDownstreamOnPolicyDelete controls whether generated resources should be deleted when the rule that generated\nthem is deleted with synchronization enabled. This option is only applicable to generate rules of the data type.\nSee https://kyverno.io/docs/writing-policies/generate/#data-examples.\nDefaults to \"false\" if not specified.",
                    "type": "boolean"
                  },
                  "synchronize": {
                    "description": "Synchronize controls if generated resources should be kept in-sync with their source resource.\nIf Synchronize is set to \"true\" changes to generated resources will be overwritten with resource\ndata from Data or the resource specified in the Clone declaration.\nOptional. Defaults to \"false\" if not specified.",
                    "type": "boolean"
                  },
                  "uid": {
                    "description": "UID specifies the resource uid.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "imageExtractors": {
                "additionalProperties": {
                  "items": {
                    "properties": {
                      "jmesPath": {
                        "description": "JMESPath is an optional JMESPath expression to apply to the image value.\nThis is useful when the extracted image begins with a prefix like 'docker://'.\nThe 'trim_prefix' function may be used to trim the prefix: trim_prefix(@, 'docker://').\nNote - Image digest mutation may not be used when applying a JMESPAth to an image.",
                        "type": "string"
                      },
                      "key": {
                        "description": "Key is an optional name of the field within 'path' that will be used to uniquely identify an image.\nNote - this field MUST be unique.",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name is the entry the image will be available under 'images.<name>' in the context.\nIf this field is not defined, image entries will appear under 'images.custom'.",
                        "type": "string"
                      },
                      "path": {
                        "description": "Path is the path to the object containing the image field in a custom resource.\nIt should be slash-separated. Each slash-separated key must be a valid YAML key or a wildcard '*'.\nWildcard keys are expanded in case of arrays or objects.",
                        "type": "string"
                      },
                      "value": {
                        "description": "Value is an optional name of the field within 'path' that points to the image URI.\nThis is useful when a custom 'key' is also defined.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "path"
                    ],
                    "type": "object",
                    "additionalProperties": false
                  },
                  "type": "array"
                },
                "description": "ImageExtractors defines a mapping from kinds to ImageExtractorConfigs.\nThis config is only valid for verifyImages rules.",
                "type": "object"
              },
              "match": {
                "description": "MatchResources defines when this policy rule should be applied. The match\ncriteria can include resource information (e.g. kind, name, namespace, labels)\nand admission review request information like the user name or role.\nAt least one kind is required.",
                "properties": {
                  "all": {
                    "description": "All allows specifying resources which will be ANDed",
                    "items": {
                      "description": "ResourceFilter allow users to \"AND\" or \"OR\" between resources",
                      "properties": {
                        "clusterRoles": {
                          "description": "ClusterRoles is the list of cluster-wide role names for the user.",
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "resources": {
                          "description": "ResourceDescription contains information about the resource being created or modified.",
                          "properties": {
                            "annotations": {
                              "additionalProperties": {
                                "type": "string"
                              },
                              "description": "Annotations is a  map of annotations (key-value pairs of type string). Annotation keys\nand values support the wildcard characters \"*\" (matches zero or many characters) and\n\"?\" (matches at least one character).",
                              "type": "object"
                            },
                            "kinds": {
                              "description": "Kinds is a list of resource kinds.",
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "name": {
                              "description": "Name is the name of the resource. The name supports wildcard characters\n\"*\" (matches zero or many characters) and \"?\" (at least one character).\nNOTE: \"Name\" is being deprecated in favor of \"Names\"."
                            }
                          },
                          "additionalProperties": false
                        }
                      },
                      "additionalProperties": false
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        }
      },
      "additionalProperties": false
    }
  },
  "additionalProperties": false
}